# API Integration Tests
# Builds Next.js in production mode, waits for readiness, tests Supabase API endpoints.

name: API Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: |
          # Install with verbose logging; include optional deps so Next SWC binaries are available
          npm ci --include=dev --verbose > npm-install.log 2>&1 || (
            echo "‚ùå npm install failed. Showing install log:"
            cat npm-install.log
            exit 1
          )

      - name: Install wait-on globally
        run: npm install -g wait-on

      - name: Build
        env:
          NODE_ENV: production
        run: |
          npm run build --verbose || (
            echo "‚ùå Build failed. Showing npm install log for debugging:"
            cat npm-install.log
            exit 1
          )

      - name: Start Next.js production server in background
        env:
          NODE_ENV: production
        run: |
          # Build already run above; start the production server for stability in CI
          # Bind to localhost for more reliable connections
          NODE_ENV=production NEXT_TELEMETRY_DISABLED=1 DEBUG=* npm run start -- -p 3000 --hostname localhost > .next.log 2>&1 &
          echo "Started production server (background)"
          # Give process a moment to crash if it's going to
          sleep 5
          if ! ps aux | grep -v grep | grep "next start"; then
            echo "‚ùå Server crashed immediately:"
            cat .next.log
            exit 1
          fi

      - name: Wait for Next.js to be ready
        run: |
          echo "Waiting up to 300s for tcp:3000 (accept any HTTP status) ..."
          # Use TCP readiness instead of HTTP 2xx to avoid false negatives when root returns 404
          wait-on tcp:3000 --interval 2000 --timeout 300000 || (
            echo "‚ùå Server did not respond within 300s. Printing logs for debugging:"
            echo "---- .next.log ----"
            tail -n 200 .next.log || echo "No .next.log found"
            echo "---- .dev.log ----"
            tail -n 200 .dev.log || echo "No .dev.log found"
            exit 1
          )

      - name: Test API endpoint directly with curl
        run: |
          echo "üß™ Testing POST to /api/availability with curl..."
          # Add extra stability check before curl test
          sleep 3
          wait-on tcp:3000 --timeout 10000
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/availability \
            -H "Content-Type: application/json" \
            -d '{"agent_name":"CI Test","availability_date":"2025-10-29","start_time":"10:00","end_time":"16:00","notes":null}')
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå Expected 201, got $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
          echo "‚úÖ Direct API test passed"

      - name: Run API integration tests
        run: |
          echo "Running npm run test:api"
          npm run test:api

      - name: Show Next.js logs (if any)
        if: failure()
        run: |
          echo "---- .next.log (tail) ----"
          [ -f .next.log ] && tail -n 200 .next.log || echo "No .next.log found"
