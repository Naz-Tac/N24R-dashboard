# API Integration Tests
# Builds Next.js in production mode, waits for readiness, tests Supabase API endpoints.

name: API Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: |
          # Install with verbose logging; include optional deps so Next SWC binaries are available
          npm ci --include=dev --verbose > npm-install.log 2>&1 || (
            echo "‚ùå npm install failed. Showing install log:"
            cat npm-install.log
            exit 1
          )

      - name: Install wait-on globally
        run: npm install -g wait-on

      - name: Build
        env:
          NODE_ENV: production
        run: |
          npm run build --verbose || (
            echo "‚ùå Build failed. Showing npm install log for debugging:"
            cat npm-install.log
            exit 1
          )

      - name: Start Next.js production server in background
        env:
          NODE_ENV: production
        run: |
          # Build already run above; start the production server for stability in CI
          # Bind to localhost for more reliable connections
          NODE_ENV=production NEXT_TELEMETRY_DISABLED=1 DEBUG=* npm run start -- -p 3000 --hostname localhost > .next.log 2>&1 &
          echo "Started production server (background)"
          # Give process a moment to crash if it's going to
          sleep 5
          if ! ps aux | grep -v grep | grep "next start"; then
            echo "‚ùå Server crashed immediately:"
            cat .next.log
            exit 1
          fi

      - name: Wait for Next.js to be ready
        run: |
          echo "Waiting up to 300s for tcp:3000 (accept any HTTP status) ..."
          # Use TCP readiness instead of HTTP 2xx to avoid false negatives when root returns 404
          wait-on tcp:3000 --interval 2000 --timeout 300000 || (
            echo "‚ùå Server did not respond within 300s. Printing logs for debugging:"
            echo "---- .next.log ----"
            tail -n 200 .next.log || echo "No .next.log found"
            echo "---- .dev.log ----"
            tail -n 200 .dev.log || echo "No .dev.log found"
            exit 1
          )

      - name: Test health endpoint
        run: |
          echo "üè• Testing /api/availability/health endpoint..."
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/availability/health)
          HEALTH_CODE=$(echo "$HEALTH_RESPONSE" | tail -n1)
          HEALTH_BODY=$(echo "$HEALTH_RESPONSE" | head -n-1)
          echo "Health Status: $HEALTH_CODE"
          echo "Health Body: $HEALTH_BODY"
          if [ "$HEALTH_CODE" != "200" ]; then
            echo "‚ùå Health check failed with status $HEALTH_CODE"
            exit 1
          fi
          echo "‚úÖ Health check passed"

      - name: Test Supabase connectivity
        run: |
          echo "üîó Testing Supabase connection..."
          # Use PostgREST to execute a lightweight query (SELECT NOW())
          SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"
          SUPABASE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          # Query a simple RPC or use PostgREST to verify connection
          # For simplicity, we'll query the agent_availability table with a limit 0 (no data returned, just tests connection)
          CONN_RESPONSE=$(curl -s -w "\n%{http_code}" "${SUPABASE_URL}/rest/v1/agent_availability?limit=0" \
            -H "apikey: ${SUPABASE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_KEY}")
          CONN_CODE=$(echo "$CONN_RESPONSE" | tail -n1)
          echo "Supabase connectivity status: $CONN_CODE"
          if [ "$CONN_CODE" != "200" ]; then
            echo "‚ùå Supabase connectivity check failed with status $CONN_CODE"
            echo "Response: $(echo "$CONN_RESPONSE" | head -n-1)"
            exit 1
          fi
          echo "‚úÖ Supabase connection verified"

      - name: Test API endpoint directly with curl
        run: |
          echo "üß™ Testing POST to /api/availability with curl..."
          # Add extra stability check before curl test
          sleep 3
          wait-on tcp:3000 --timeout 10000
          # Build a unique, schema-valid payload to avoid collisions with any unique constraints
          DATE=$(date -u +%F)
          START_MIN=$(printf "%02d" $((RANDOM % 60)))
          END_MIN=$(printf "%02d" $(((10 + RANDOM) % 60)))
          START="10:${START_MIN}:00"
          END="16:${END_MIN}:00"
          NAME="CI Test ${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          PAYLOAD=$(printf '{"agent_name":"%s","availability_date":"%s","start_time":"%s","end_time":"%s","notes":null}' "${NAME}" "${DATE}" "${START}" "${END}")
          echo "Using payload: $PAYLOAD"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/availability \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå Expected 201, got $HTTP_CODE"
            echo "Response: $BODY"
            echo "---- .next.log (tail) ----"
            [ -f .next.log ] && tail -n 200 .next.log || echo "No .next.log found"
            exit 1
          fi
          echo "‚úÖ Direct API test passed"

      - name: Test Assignments POST endpoint
        run: |
          echo "üß™ Testing POST to /api/assignments with curl..."
          # Generate random UUIDs for agent_id and shift_id
          AGENT_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
          SHIFT_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
          STATUS="assigned"
          NOTES="CI Test Assignment ${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          PAYLOAD=$(printf '{"agent_id":"%s","shift_id":"%s","status":"%s","notes":"%s"}' "${AGENT_ID}" "${SHIFT_ID}" "${STATUS}" "${NOTES}")
          echo "Using payload: $PAYLOAD"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/assignments \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå Expected 201, got $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
          echo "‚úÖ Assignments POST test passed"

      - name: Test Assignments GET endpoint
        run: |
          echo "üß™ Testing GET /api/assignments..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/assignments)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body (truncated): $(echo "$BODY" | head -c 500)"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå Expected 200, got $HTTP_CODE"
            exit 1
          fi
          echo "‚úÖ Assignments GET test passed"

      - name: Run API integration tests
        run: |
          echo "Running npm run test:api"
          # Small buffer to ensure server is fully warm after curl test
          sleep 2
          PORT=3000 npm run test:api

      - name: Show Next.js logs (if any)
        if: failure()
        run: |
          echo "---- .next.log (tail) ----"
          [ -f .next.log ] && tail -n 200 .next.log || echo "No .next.log found"
