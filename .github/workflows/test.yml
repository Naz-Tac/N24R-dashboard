# API Integration Tests
# Builds Next.js in production mode, waits for readiness, tests Supabase API endpoints.

name: API Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: |
          # Install with verbose logging; include optional deps so Next SWC binaries are available
          npm ci --include=dev --verbose > npm-install.log 2>&1 || (
            echo "‚ùå npm install failed. Showing install log:"
            cat npm-install.log
            exit 1
          )

      - name: Install wait-on globally
        run: npm install -g wait-on

      - name: Build
        env:
          NODE_ENV: production
        run: |
          npm run build --verbose || (
            echo "‚ùå Build failed. Showing npm install log for debugging:"
            cat npm-install.log
            exit 1
          )

      - name: Start Next.js production server in background
        env:
          NODE_ENV: production
        run: |
          # Build already run above; start the production server for stability in CI
          # Bind to localhost for more reliable connections
          NODE_ENV=production NEXT_TELEMETRY_DISABLED=1 DEBUG=* npm run start -- -p 3000 --hostname localhost > .next.log 2>&1 &
          echo "Started production server (background)"
          # Give process a moment to crash if it's going to
          sleep 5
          if ! ps aux | grep -v grep | grep "next start"; then
            echo "‚ùå Server crashed immediately:"
            cat .next.log
            exit 1
          fi

      - name: Wait for Next.js to be ready
        run: |
          echo "Waiting up to 300s for tcp:3000 (accept any HTTP status) ..."
          # Use TCP readiness instead of HTTP 2xx to avoid false negatives when root returns 404
          wait-on tcp:3000 --interval 2000 --timeout 300000 || (
            echo "‚ùå Server did not respond within 300s. Printing logs for debugging:"
            echo "---- .next.log ----"
            tail -n 200 .next.log || echo "No .next.log found"
            echo "---- .dev.log ----"
            tail -n 200 .dev.log || echo "No .dev.log found"
            exit 1
          )

      - name: Setup Auth & RBAC test users (admin, agent)
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_ANON: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "üë• Creating admin and agent test users and obtaining tokens..."

          RUN_ID=${{ github.run_id }}
          ATTEMPT=${{ github.run_attempt }}
          ADMIN_EMAIL="admin-${RUN_ID}-${ATTEMPT}@ci.test"
          AGENT_EMAIL="agent-${RUN_ID}-${ATTEMPT}@ci.test"
          PASSWORD="P@ss-${RUN_ID}-${ATTEMPT}"

          create_user() {
            local EMAIL="$1"
            local PASSWORD="$2"
            RESP=$(curl -s -w "\n%{http_code}" -X POST "http://localhost:3000/api/auth/create-test-user" \
              -H "Content-Type: application/json" \
              -d "{\"email\":\"${EMAIL}\",\"password\":\"${PASSWORD}\"}")
            CODE=$(echo "$RESP" | tail -n1)
            BODY=$(echo "$RESP" | head -n-1)
            if [ "$CODE" != "201" ]; then
              echo "‚ùå Failed to create user ${EMAIL}, HTTP $CODE"
              echo "Response: $BODY"
              exit 1
            fi
            echo "$BODY"
          }

          get_token() {
            local EMAIL="$1"
            local PASSWORD="$2"
            TOKEN_RESP=$(curl -s -X POST "${SUPABASE_URL}/auth/v1/token?grant_type=password" \
              -H "apikey: ${SUPABASE_ANON}" \
              -H "Content-Type: application/json" \
              -d "{\"email\":\"${EMAIL}\",\"password\":\"${PASSWORD}\"}")
            # Extract access_token with sed to avoid jq dependency
            echo "$TOKEN_RESP" | sed -n 's/.*"access_token":"\([^"]*\)".*/\1/p'
          }

          set_role() {
            local USER_ID="$1"
            local ROLE="$2"
            ROLE_RESP=$(curl -s -w "\n%{http_code}" -X POST "${SUPABASE_URL}/rest/v1/user_roles?on_conflict=user_id" \
              -H "apikey: ${SUPABASE_SERVICE}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE}" \
              -H "Content-Type: application/json" \
              -H "Prefer: resolution=merge-duplicates,return=minimal" \
              -d "[{\"user_id\":\"${USER_ID}\",\"role\":\"${ROLE}\"}]")
            RC=$(echo "$ROLE_RESP" | tail -n1)
            if [ "$RC" != "201" ] && [ "$RC" != "204" ]; then
              echo "‚ùå Failed to set role ${ROLE} for user ${USER_ID}, HTTP $RC"
              echo "Response: $(echo "$ROLE_RESP" | head -n-1)"
              exit 1
            fi
          }

          echo "Creating admin user ${ADMIN_EMAIL}..."
          ADMIN_CREATE=$(create_user "$ADMIN_EMAIL" "$PASSWORD")
          ADMIN_ID=$(echo "$ADMIN_CREATE" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p')
          if [ -z "$ADMIN_ID" ]; then
            echo "‚ùå Could not parse admin user id"
            echo "$ADMIN_CREATE"
            exit 1
          fi
          set_role "$ADMIN_ID" "admin"
          ADMIN_TOKEN=$(get_token "$ADMIN_EMAIL" "$PASSWORD")
          if [ -z "$ADMIN_TOKEN" ]; then
            echo "‚ùå Failed to obtain admin access token"
            exit 1
          fi
          echo "ADMIN_TOKEN=$ADMIN_TOKEN" >> $GITHUB_ENV

          echo "Creating agent user ${AGENT_EMAIL}..."
          AGENT_CREATE=$(create_user "$AGENT_EMAIL" "$PASSWORD")
          AGENT_ID=$(echo "$AGENT_CREATE" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p')
          if [ -z "$AGENT_ID" ]; then
            echo "‚ùå Could not parse agent user id"
            echo "$AGENT_CREATE"
            exit 1
          fi
          set_role "$AGENT_ID" "agent"
          AGENT_TOKEN=$(get_token "$AGENT_EMAIL" "$PASSWORD")
          if [ -z "$AGENT_TOKEN" ]; then
            echo "‚ùå Failed to obtain agent access token"
            exit 1
          fi
          echo "AGENT_TOKEN=$AGENT_TOKEN" >> $GITHUB_ENV

          echo "‚úÖ Auth setup complete. Admin and Agent tokens exported."

      - name: Test health endpoint
        run: |
          echo "üè• Testing /api/availability/health endpoint..."
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/availability/health)
          HEALTH_CODE=$(echo "$HEALTH_RESPONSE" | tail -n1)
          HEALTH_BODY=$(echo "$HEALTH_RESPONSE" | head -n-1)
          echo "Health Status: $HEALTH_CODE"
          echo "Health Body: $HEALTH_BODY"
          if [ "$HEALTH_CODE" != "200" ]; then
            echo "‚ùå Health check failed with status $HEALTH_CODE"
            exit 1
          fi
          echo "‚úÖ Health check passed"

      - name: Test Supabase connectivity
        run: |
          echo "üîó Testing Supabase connection..."
          # Use PostgREST to execute a lightweight query (SELECT NOW())
          SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"
          SUPABASE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          # Query a simple RPC or use PostgREST to verify connection
          # For simplicity, we'll query the agent_availability table with a limit 0 (no data returned, just tests connection)
          CONN_RESPONSE=$(curl -s -w "\n%{http_code}" "${SUPABASE_URL}/rest/v1/agent_availability?limit=0" \
            -H "apikey: ${SUPABASE_KEY}" \
            -H "Authorization: Bearer ${SUPABASE_KEY}")
          CONN_CODE=$(echo "$CONN_RESPONSE" | tail -n1)
          echo "Supabase connectivity status: $CONN_CODE"
          if [ "$CONN_CODE" != "200" ]; then
            echo "‚ùå Supabase connectivity check failed with status $CONN_CODE"
            echo "Response: $(echo "$CONN_RESPONSE" | head -n-1)"
            exit 1
          fi
          echo "‚úÖ Supabase connection verified"

      - name: Test API endpoint directly with curl
        run: |
          echo "üß™ Testing POST to /api/availability with curl..."
          # Add extra stability check before curl test
          sleep 3
          wait-on tcp:3000 --timeout 10000
          # Build a unique, schema-valid payload to avoid collisions with any unique constraints
          DATE=$(date -u +%F)
          START_MIN=$(printf "%02d" $((RANDOM % 60)))
          END_MIN=$(printf "%02d" $(((10 + RANDOM) % 60)))
          START="10:${START_MIN}:00"
          END="16:${END_MIN}:00"
          NAME="CI Test ${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          PAYLOAD=$(printf '{"agent_name":"%s","availability_date":"%s","start_time":"%s","end_time":"%s","notes":null}' "${NAME}" "${DATE}" "${START}" "${END}")
          echo "Using payload: $PAYLOAD"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/availability \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${AGENT_TOKEN}" \
            -d "$PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå Expected 201, got $HTTP_CODE"
            echo "Response: $BODY"
            echo "---- .next.log (tail) ----"
            [ -f .next.log ] && tail -n 200 .next.log || echo "No .next.log found"
            exit 1
          fi
          echo "‚úÖ Direct API test passed"

      - name: Test Assignments POST endpoint
        run: |
          echo "üß™ Testing POST to /api/assignments with curl..."
          # Generate random UUIDs for agent_id and shift_id
          AGENT_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
          SHIFT_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
          STATUS="assigned"
          NOTES="CI Test Assignment ${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          PAYLOAD=$(printf '{"agent_id":"%s","shift_id":"%s","status":"%s","notes":"%s"}' "${AGENT_ID}" "${SHIFT_ID}" "${STATUS}" "${NOTES}")
          echo "Using payload: $PAYLOAD"
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/assignments \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "$PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå Expected 201, got $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
          echo "‚úÖ Assignments POST test passed"

      - name: Test Assignments GET endpoint
        run: |
          echo "üß™ Testing GET /api/assignments..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/assignments \
            -H "Authorization: Bearer ${ADMIN_TOKEN}")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body (truncated): $(echo "$BODY" | head -c 500)"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå Expected 200, got $HTTP_CODE"
            exit 1
          fi
          echo "‚úÖ Assignments GET test passed"

      - name: Test Dashboard endpoint
        run: |
          echo "üìä Testing GET /api/dashboard..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/dashboard)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body (truncated): $(echo "$BODY" | head -c 500)"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå Expected 200, got $HTTP_CODE"
            exit 1
          fi
          # Verify response has expected structure (success and data fields)
          if echo "$BODY" | grep -q '"success":true' && echo "$BODY" | grep -q '"data"'; then
            echo "‚úÖ Dashboard endpoint test passed with valid structure"
          else
            echo "‚ùå Response missing expected fields (success, data)"
            exit 1
          fi

      - name: Dashboard Charts Render Test (allow redirect if protected)
        run: |
          echo "üìà Testing Dashboard page with charts..."
          # Test that the dashboard page loads successfully
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/dashboard)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "HTTP Status: $HTTP_CODE"
          # Accept 200 (rendered) or 30x (redirect to signin) depending on middleware state
          case "$HTTP_CODE" in
            200|301|302|307|308)
              echo "‚úÖ Dashboard page reachable (HTTP $HTTP_CODE)" ;;
            *)
              echo "‚ùå Dashboard page unexpected status $HTTP_CODE" ; exit 1 ;;
          esac
          # Verify the page contains dashboard elements (basic HTML structure check)
          if echo "$BODY" | grep -qi "dashboard" || echo "$BODY" | grep -qi "availability"; then
            echo "‚úÖ Dashboard page rendered successfully"
          else
            echo "‚ö†Ô∏è  Dashboard page loaded but content validation inconclusive"
          fi

      - name: Agents API CRUD Tests
        run: |
          echo "üë§ Testing Agents API CRUD operations..."
          
          # POST - Create agent (expect 201)
          echo "Testing POST /api/agents..."
          AGENT_PAYLOAD=$(cat <<EOF
          {
            "name": "Test Agent ${{ github.run_id }}",
            "email": "agent-${{ github.run_id }}@test.com",
            "role": "Support Agent",
            "status": "active"
          }
          EOF
          )
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/agents \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "$AGENT_PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "POST Response: $BODY"
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå POST failed, expected 201, got $HTTP_CODE"
            exit 1
          fi
          AGENT_ID=$(echo "$BODY" | grep -o '"id":"[^"]*"' | head -n1 | cut -d'"' -f4)
          echo "Created agent with ID: $AGENT_ID"
          
          # GET - List agents (expect 200)
          echo "Testing GET /api/agents..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/agents \
            -H "Authorization: Bearer ${ADMIN_TOKEN}")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå GET failed, expected 200, got $HTTP_CODE"
            exit 1
          fi
          
          # PUT - Update agent (expect 200)
          echo "Testing PUT /api/agents..."
          UPDATE_PAYLOAD=$(cat <<EOF
          {
            "id": "$AGENT_ID",
            "status": "inactive"
          }
          EOF
          )
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT http://localhost:3000/api/agents \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "$UPDATE_PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "PUT Response: $BODY"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå PUT failed, expected 200, got $HTTP_CODE"
            exit 1
          fi
          
          # DELETE - Remove agent (expect 204)
          echo "Testing DELETE /api/agents..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "http://localhost:3000/api/agents?id=$AGENT_ID" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}")
          if [ "$HTTP_CODE" != "204" ]; then
            echo "‚ùå DELETE failed, expected 204, got $HTTP_CODE"
            exit 1
          fi
          
          echo "‚úÖ Agents API CRUD tests passed"

      - name: Shifts API CRUD Tests
        run: |
          echo "üìÖ Testing Shifts API CRUD operations..."
          
          # POST - Create shift (expect 201)
          echo "Testing POST /api/shifts..."
          SHIFT_PAYLOAD=$(cat <<EOF
          {
            "date": "2025-11-15",
            "start_time": "09:00",
            "end_time": "17:00",
            "location": "Office Building A",
            "notes": "CI Test Shift ${{ github.run_id }}"
          }
          EOF
          )
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/shifts \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "$SHIFT_PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "POST Response: $BODY"
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå POST failed, expected 201, got $HTTP_CODE"
            exit 1
          fi
          SHIFT_ID=$(echo "$BODY" | grep -o '"id":"[^"]*"' | head -n1 | cut -d'"' -f4)
          echo "Created shift with ID: $SHIFT_ID"
          
          # GET - List shifts (expect 200)
          echo "Testing GET /api/shifts..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/shifts \
            -H "Authorization: Bearer ${ADMIN_TOKEN}")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå GET failed, expected 200, got $HTTP_CODE"
            exit 1
          fi
          
          # PUT - Update shift (expect 200)
          echo "Testing PUT /api/shifts..."
          UPDATE_PAYLOAD=$(cat <<EOF
          {
            "id": "$SHIFT_ID",
            "location": "Office Building B"
          }
          EOF
          )
          RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT http://localhost:3000/api/shifts \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "$UPDATE_PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          echo "PUT Response: $BODY"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå PUT failed, expected 200, got $HTTP_CODE"
            exit 1
          fi
          
          # DELETE - Remove shift (expect 204)
          echo "Testing DELETE /api/shifts..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "http://localhost:3000/api/shifts?id=$SHIFT_ID" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}")
          if [ "$HTTP_CODE" != "204" ]; then
            echo "‚ùå DELETE failed, expected 204, got $HTTP_CODE"
            exit 1
          fi
          
          echo "‚úÖ Shifts API CRUD tests passed"

      - name: Realtime Connectivity Test
        run: |
          echo "üì° Testing Supabase Realtime connectivity..."
          
          # Insert a test record into agent_availability to trigger realtime event
          echo "Inserting test availability record to trigger realtime event..."
          REALTIME_PAYLOAD=$(cat <<EOF
          {
            "agent_name": "Realtime Test Agent ${{ github.run_id }}",
            "availability_date": "2025-11-20",
            "start_time": "10:00",
            "end_time": "18:00",
            "notes": "Realtime connectivity test"
          }
          EOF
          )
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/availability \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "$REALTIME_PAYLOAD")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" != "201" ]; then
            echo "‚ùå Failed to insert realtime test record, got HTTP $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
          
          echo "‚úÖ Realtime test record inserted successfully"
          echo "üì° Realtime event should be logged in browser console when dashboard is open"
          echo "Note: CI validates realtime channel setup via successful insert"
          
          # Verify the record was created via GET
          echo "Verifying record via GET /api/availability..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/availability \
            -H "Authorization: Bearer ${ADMIN_TOKEN}")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå GET verification failed, got HTTP $HTTP_CODE"
            exit 1
          fi
          
          if echo "$BODY" | grep -q "Realtime Test Agent"; then
            echo "‚úÖ Realtime Connectivity Test passed - record verified"
          else
            echo "‚ö†Ô∏è  Record inserted but not found in GET response (may be timing issue)"
          fi

      - name: Stage 12 ‚Äì Auth & RBAC Tests
        run: |
          echo "üîê Stage 12: Auth & RBAC behavioral checks..."
          echo "0) Unauthenticated GET /dashboard should redirect to /signin"
          UNAUTH_HEADERS=$(curl -s -D - -o /dev/null http://localhost:3000/dashboard)
          echo "$UNAUTH_HEADERS" | grep -qi "^location: .*signin" || (echo "‚ùå Expected redirect to /signin for unauthenticated" && exit 1)

          echo "1) Admin can GET /api/agents (expect 200)"
          ADMIN_GET=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/agents \
            -H "Authorization: Bearer ${ADMIN_TOKEN}")
          ADMIN_CODE=$(echo "$ADMIN_GET" | tail -n1)
          if [ "$ADMIN_CODE" != "200" ]; then
            echo "‚ùå Admin GET /api/agents expected 200, got $ADMIN_CODE"; exit 1; fi

          echo "2) Agent forbidden on GET /api/agents (expect 403)"
          AGENT_GET=$(curl -s -w "\n%{http_code}" http://localhost:3000/api/agents \
            -H "Authorization: Bearer ${AGENT_TOKEN}")
          AGENT_CODE=$(echo "$AGENT_GET" | tail -n1)
          if [ "$AGENT_CODE" != "403" ]; then
            echo "‚ùå Agent GET /api/agents expected 403, got $AGENT_CODE"; exit 1; fi

          echo "3) Agent can POST /api/availability (expect 201)"
          NOWDATE=$(date -u +%F)
          AV_PAYLOAD=$(printf '{"agent_name":"RBAC Agent","availability_date":"%s","start_time":"08:00","end_time":"12:00"}' "$NOWDATE")
          AV_POST=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/availability \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${AGENT_TOKEN}" \
            -d "$AV_PAYLOAD")
          AV_CODE=$(echo "$AV_POST" | tail -n1)
          if [ "$AV_CODE" != "201" ]; then
            echo "‚ùå Agent POST /api/availability expected 201, got $AV_CODE"; exit 1; fi

          echo "4) Unauthenticated POST /api/assignments blocked (expect 401/403)"
          ASG_PAYLOAD='{"agent_id":"00000000-0000-0000-0000-000000000000","shift_id":"00000000-0000-0000-0000-000000000000","status":"assigned"}'
          UNAUTH=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:3000/api/assignments \
            -H "Content-Type: application/json" \
            -d "$ASG_PAYLOAD")
          case "$UNAUTH" in
            401|403) echo "‚úÖ Unauthenticated request correctly blocked (HTTP $UNAUTH)" ;;
            *) echo "‚ùå Expected 401/403 for unauthenticated, got $UNAUTH"; exit 1 ;;
          esac

          echo "5) Agent page access: /availability allowed, /dashboard denied"
          # Provide session to middleware via sb-access-token cookie
          AV_PAGE_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/availability \
            -H "Cookie: sb-access-token=${AGENT_TOKEN}")
          if [ "$AV_PAGE_CODE" != "200" ]; then
            echo "‚ùå Agent should access /availability page, got $AV_PAGE_CODE"; exit 1; fi
          DASH_HEADERS=$(curl -s -D - -o /dev/null http://localhost:3000/dashboard \
            -H "Cookie: sb-access-token=${AGENT_TOKEN}")
          echo "$DASH_HEADERS" | grep -qi "^location: .*signin" || (echo "‚ùå Agent should be redirected away from /dashboard" && exit 1)

          echo "6) Admin can access protected pages"
          for PATH in \
            "/dashboard" \
            "/agents" \
            "/shifts" \
            "/settings/users"; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000${PATH}" \
              -H "Cookie: sb-access-token=${ADMIN_TOKEN}")
            if [ "$CODE" != "200" ]; then
              echo "‚ùå Admin GET ${PATH} expected 200, got $CODE"; exit 1; fi
          done

          echo "‚úÖ Stage 12 Auth & RBAC tests passed"

      - name: Stage 13 ‚Äì Agent Portal & Respond Flow
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_ANON: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "üë§ Stage 13: Verify /agent/dashboard access with agent cookie"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/agent/dashboard \
            -H "Cookie: sb-access-token=${AGENT_TOKEN}")
          if [ "$CODE" != "200" ]; then
            echo "‚ùå /agent/dashboard expected 200, got $CODE"; exit 1; fi

          echo "üìå Create an assignment for the agent (admin)"
          SHIFT_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
          ASSIGN_PAYLOAD=$(printf '{"agent_id":"%s","shift_id":"%s","status":"assigned"}' "${AGENT_ID}" "${SHIFT_ID}")
          CREATE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/assignments \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "$ASSIGN_PAYLOAD")
          C_CODE=$(echo "$CREATE" | tail -n1)
          C_BODY=$(echo "$CREATE" | head -n-1)
          if [ "$C_CODE" != "201" ]; then
            echo "‚ùå Failed to create assignment, HTTP $C_CODE"; echo "$C_BODY"; exit 1; fi
          ASSIGNMENT_ID=$(echo "$C_BODY" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p')
          if [ -z "$ASSIGNMENT_ID" ]; then echo "‚ùå Could not parse assignment id"; echo "$C_BODY"; exit 1; fi

          echo "‚úÖ Assignment created: $ASSIGNMENT_ID"
          echo "üü¢ Agent responds ACCEPT to assignment"
          RESPOND=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/assignments/respond \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${AGENT_TOKEN}" \
            -d "{\"assignment_id\":\"${ASSIGNMENT_ID}\",\"action\":\"accept\"}")
          R_CODE=$(echo "$RESPOND" | tail -n1)
          R_BODY=$(echo "$RESPOND" | head -n-1)
          if [ "$R_CODE" != "200" ]; then
            echo "‚ùå Agent respond expected 200, got $R_CODE"; echo "$R_BODY"; exit 1; fi

          echo "‚è±Ô∏è  Verifying status via Supabase REST (wait up to 2s)"
          TARGET_URL="${SUPABASE_URL}/rest/v1/assignments?id=eq.${ASSIGNMENT_ID}&select=id,status"
          for i in 1 2 3 4; do
            S=$(curl -s "$TARGET_URL" -H "apikey: ${SUPABASE_ANON}" -H "Authorization: Bearer ${SUPABASE_SERVICE}")
            STATUS=$(echo "$S" | sed -n 's/.*"status":"\([^"]*\)".*/\1/p')
            if [ "$STATUS" = "accepted" ]; then
              echo "‚úÖ Assignment status updated to 'accepted'"; FOUND=1; break; fi
            sleep 0.5
          done
          if [ "${FOUND:-0}" != "1" ]; then
            echo "‚ùå Assignment status did not update to 'accepted' in time"; echo "$S"; exit 1; fi

          echo "‚úÖ Stage 13 Agent Portal tests passed"

      - name: Stage 14 ‚Äì Messaging Automation Tests
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_ANON: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NOTIFICATIONS_MOCK: '1'
          WEBHOOK_SECRET: 'ci-secret'
        run: |
          echo "üì£ Stage 14: Messaging send and webhook response"
          # Create assignment for agent
          SHIFT2_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
          MAKE=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/assignments \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "{\"agent_id\":\"${AGENT_ID}\",\"shift_id\":\"${SHIFT2_ID}\",\"status\":\"assigned\"}")
          M_CODE=$(echo "$MAKE" | tail -n1)
          M_BODY=$(echo "$MAKE" | head -n-1)
          if [ "$M_CODE" != "201" ]; then echo "‚ùå Create assignment failed"; echo "$M_BODY"; exit 1; fi
          AID=$(echo "$M_BODY" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p')
          echo "Assignment: $AID"

          echo "‚û°Ô∏è  Send notification (mock providers)"
          SEND=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/notifications/send \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${ADMIN_TOKEN}" \
            -d "{\"agent_id\":\"${AGENT_ID}\",\"shift_id\":\"${SHIFT2_ID}\",\"channel\":\"sms\",\"message\":\"New shift assigned\"}")
          S_CODE=$(echo "$SEND" | tail -n1)
          S_BODY=$(echo "$SEND" | head -n-1)
          echo "Send code: $S_CODE Body: $S_BODY"
          if [ "$S_CODE" != "200" ]; then echo "‚ùå Notification send failed"; exit 1; fi

          echo "üì• Simulate webhook response: YES -> accept"
          RESP=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/api/assignments/respond \
            -H "Content-Type: application/json" \
            -d "{\"webhook_secret\":\"${WEBHOOK_SECRET}\",\"assignment_id\":\"${AID}\",\"body\":\"YES\"}")
          R_CODE=$(echo "$RESP" | tail -n1)
          if [ "$R_CODE" != "200" ]; then echo "‚ùå Webhook respond failed ($R_CODE)"; echo "$RESP"; exit 1; fi

          echo "üîé Verify status becomes accepted within 3s"
          TARGET="${SUPABASE_URL}/rest/v1/assignments?id=eq.${AID}&select=id,status"
          for i in 1 2 3 4 5 6; do
            OUT=$(curl -s "$TARGET" -H "apikey: ${SUPABASE_ANON}" -H "Authorization: Bearer ${SUPABASE_SERVICE}")
            STATUS=$(echo "$OUT" | sed -n 's/.*"status":"\([^"]*\)".*/\1/p')
            if [ "$STATUS" = "accepted" ]; then echo "‚úÖ Accepted confirmed"; OK=1; break; fi
            sleep 0.5
          done
          if [ "${OK:-0}" != "1" ]; then echo "‚ùå Status not accepted in time"; echo "$OUT"; exit 1; fi

          echo "‚úÖ Stage 14 messaging tests passed"

      - name: Run API integration tests
        env:
          AUTH_TOKEN: ${{ env.AGENT_TOKEN }}
        run: |
          echo "Running npm run test:api"
          # Small buffer to ensure server is fully warm after curl test
          sleep 2
          PORT=3000 npm run test:api

      - name: Show Next.js logs (if any)
        if: failure()
        run: |
          echo "---- .next.log (tail) ----"
          [ -f .next.log ] && tail -n 200 .next.log || echo "No .next.log found"
